{"version":3,"sources":["Day.js","WeekContainer.js","App.js","serviceWorker.js","index.js","apiKeys.js"],"names":["moment","require","Day","data","newDate","Date","weekday","dt","setTime","imgURL","weather","id","className","format","Math","round","main","temp","description","WeekContainer","props","state","fullData","dailyData","zipcode","city","country","address","handleSubmit","bind","masterKey","key","this","weatherUrl","weatherKey","fetch","then","res","json","list","filter","current","dt_txt","includes","setState","map","idx","e","preventDefault","undefined","Geocode","setApiKey","googlekey","setLanguage","setRegion","fromLatLng","coord","lat","lon","response","results","formatted_address","split","slice","join","error","console","name","document","getElementById","value","field","target","style","onSubmit","type","placeholder","onChange","update","onClick","days","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0e616ba2.chunk.js","sourcesContent":["import React from 'react'\nconst moment = require('moment');\n// const moment = require('moment');\n\nconst Day = ({data}) => {\n        let newDate = new Date();\n        const weekday = data.dt * 1000;\n        newDate.setTime(weekday);\n    const imgURL = `owf owf-${data.weather[0].id} owf-5x`;\n        \n        return (\n            <div className=\"col-sm-2\">\n                <div className=\"card\">\n                    <h3 className=\"card-title\">{moment(newDate).format('ddd')}</h3>\n                    <p className=\"text-muted\">{moment(newDate).format('MMM Do, h:mm a')}</p>\n                    <i className={imgURL}></i>\n                    <h2>{Math.round((data.main.temp - 273.15) * 9/5 + 32)} Â°F</h2>\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">{data.weather[0].description}</p>\n                    </div>\n                </div>\n            </div>\n        )\n}\n\nexport default Day;","import React from 'react';\nimport key from './apiKeys';\nimport Day from './Day';\nimport Geocode from \"react-geocode\";\n\nclass WeekContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fullData: [],\n            dailyData: [],\n            zipcode: 11215,\n            city: \"Brooklyn\",\n            country: \"US\",\n            address: \"Brooklyn, NY 11215, USA\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n        \n    \n    componentDidMount(){\n        \n        let masterKey = key;\n        let zipcode = this.state.zipcode;\n        const weatherUrl = `http://api.openweathermap.org/data/2.5/forecast?zip=${zipcode},us&APPID=${masterKey.weatherKey}`\n        \n        fetch(weatherUrl)\n            .then(res => res.json())\n            .then(data => {\n                \n                const dailyData = data.list.filter(current => current.dt_txt.includes(\"18:00:00\"))\n                \n                \n                this.setState({\n                    dailyData: dailyData,\n                    fullData: data.list\n                })\n            })\n    }\n\n    days(){\n        return this.state.dailyData.map((data, idx) => (\n            <Day key={idx} data={data}/>\n        ))\n    }\n\n    handleSubmit(e){\n        \n        e.preventDefault();\n        let address = undefined\n        let masterKey = key;\n        let zipcode = this.state.zipcode;\n        const weatherUrl = `http://api.openweathermap.org/data/2.5/forecast?zip=${zipcode},us&APPID=${masterKey.weatherKey}`\n        Geocode.setApiKey(`${masterKey.googlekey}`)\n        Geocode.setLanguage(\"en\");\n        Geocode.setRegion(\"us\");\n        \n            fetch(weatherUrl)\n                .then(res => res.json())\n                .then(data => {\n\n                    const dailyData = data.list.filter(current => current.dt_txt.includes(\"18:00:00\"))\n                    Geocode.fromLatLng(`${data.city.coord.lat}`, `${data.city.coord.lon}`).then(\n                        response => {\n\n                            \n                            address = response.results[0].formatted_address.split(\",\").slice(1).join(\",\");\n\n                        }, error => {\n                            console.error(error)\n                        }\n                    ).then(() => this.setState({ address: address}))\n                        \n                        this.setState({\n                            dailyData: dailyData,\n                            fullData: data.list,\n                            zipcode: zipcode,\n                            city: data.city.name,\n                            country: data.city.country\n                        })\n                        \n                })\n        document.getElementById('elementId').value = '';\n    }\n\n    update(field) {\n        return (e) => {\n            this.setState({ [field]: e.target.value });\n        };\n    };\n\n\n    render(){  \n        let {address} = this.state\n        return (\n            <div className=\"container\">\n                <h1 className=\"display-3 jumbotron-fluid\" style={{ \"backgroundColor\": \"#dff2f8\", \"color\": \"#e81296\"}}>5 Day Forecast</h1>\n                 <h5 className=\"display-4 text-muted\">{address}</h5>\n                <form className=\"display-5 text-muted\" onSubmit={this.handleSubmit}>\n                    <label className=\"zipcode\">Enter your: {' '}\n    \n                <input id=\"elementId\" type=\"text\" placeholder=' Zipcode'  onChange={this.update('zipcode')}>\n\n                </input>\n                </label>\n                <button onClick={this.handleSubmit}>Submit</button>\n                </form>\n                <div className=\"row justify-content-center\">\n\n                {this.days()}\n                \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default WeekContainer;","import React from 'react';\nimport './App.css';\nimport { Component} from 'react';\nimport WeekContainer from './WeekContainer';\nclass App extends Component{\n  render(){\n\n    return (\n      <div className=\"App\">\n          <WeekContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    weatherKey: \"7eb60a40ebb9a960af5e1fa97fca919e\",\n    googlekey: \"AIzaSyB2ZGrk8fMP_t8HijcXoOlj3Ea1yHsrg9c\"\n}"],"sourceRoot":""}